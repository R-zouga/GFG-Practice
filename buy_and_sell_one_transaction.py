def maximum_profit(prices):
    """
    Calculate the maximum profit that can be achieved from a series of stock prices.

    Given a list of stock prices, this function computes the maximum possible profit
    from a single buy and sell operation. The profit is calculated based on the difference
    between the selling and buying prices. The function efficiently tracks the minimal
    price and utilizes encoding to merge intermediate results into the original list to
    facilitate fast processing.
    The time complexity of this function is O(n) where n is the length of the input list.
    The memory complexity is O(1).

    :param prices: A list of integers representing stock prices on different days.
    :return: An integer representing the maximum profit achievable.
    """

    # this documentation was generated by AI which keeps getting better
    # but true the trick here is to compute the cumulative minimum from left
    # and store it accordingly in cells by encoding since prices values are restricted in the problem
    # https://www.geeksforgeeks.org/problems/buy-stock-2/1

    min_price = encoder = 10001
    n = len(prices)

    for i in range(n - 1):
        min_price = min(prices[i], min_price)
        prices[i] += encoder * min_price

    result = 0
    for i in range(1, n):
        a = prices[n - i] % encoder
        b = prices[n - i - 1] // encoder
        result = max(result, a - b)

    return result


if __name__ == '__main__':
    prices = [int(x) for x in input().split()]
    print(maximum_profit(prices))
